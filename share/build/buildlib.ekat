#!/usr/bin/env python3

import os, sys, argparse, logging, shutil

from standard_script_setup import *
from CIME import utils
from CIME.utils import expect, run_bld_cmd_ensure_logging, run_cmd_no_fail, run_cmd
from CIME.case import Case
from CIME.build import get_standard_makefile_args

sys.path.append(os.path.dirname(__file__))
from buildlib_util import extract_from_macros

logger = logging.getLogger(__name__)

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0} [--debug]
OR
{0} --verbose
OR
{0} --help

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Run \033[0m
    > {0}
""".format(
            os.path.basename(args[0])
        ),
        description=description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    utils.setup_standard_logging_options(parser)

    parser.add_argument("buildroot", help="build path root")

    parser.add_argument("installpath", help="install path ")

    parser.add_argument(
        "caseroot", nargs="?", default=os.getcwd(), help="Case directory to build"
    )

    args = utils.parse_args_and_handle_standard_logging_options(args, parser)

    return args.buildroot, args.installpath, args.caseroot

###############################################################################
def buildlib(bldroot, installpath, case):
###############################################################################

    # Figure out where we are getting Kokkos from
    if case.get_value("USE_ALBANY") or case.get_value("USE_TRILINOS"):
        print ("case is using Trilinos and will use its Kokkos")

        # Set Kokkos_ROOT so Ekat knows to find Kokkos from Albany/Trilinos
        expect(os.environ.get("Trilinos_ROOT") is not None,
               "USE_TRILINOS|USE_ALBANY is On, but Trilinos_ROOT is not set!")
        os.environ["Kokkos_ROOT"] = os.environ.get("Trilinos_ROOT")

    installed_ekat_dir = os.environ.get("Ekat_ROOT")
    if installed_ekat_dir is not None:
        # We are trying to use a pre-installed ekat. Look for the relevant folders/libs,
        # and if all looks good, return. Otherwise, crap out
        ekat_root = os.path.abspath(installed_ekat_dir)
        include_dir = os.path.join(ekat_root,'include')

        expect (os.path.isdir(ekat_root),f"Non-existent ekat install dir '{ekat_root}'")
        expect (os.path.isdir(include_dir),f"Missing include subfolder in ekat install dir '{ekat_root}'")
        expect (os.path.isdir(os.path.join(include_dir,"ekat")),f"Missing ekat headers in '{include_dir}'")

        print (f"Using pre-installed Ekat_ROOT: {ekat_root}")
        return
    else:
        print ("no value found in env for Ekat_ROOT. building from scratch")

    srcroot = case.get_value("SRCROOT")
    ekat_dir = os.path.join(srcroot, "externals", "ekat")
    expect(os.path.isdir(ekat_dir), "Missing ekat submodule")

    # We want to get the compiler and kokkos_options from Macros.make
    # (generated from cmake_macros), but we want to otherwise
    # let kokkos control flags
    mpilib = case.get_value("MPILIB")
    macro_vals = extract_from_macros(case, "kokkos", extra_vars=("KOKKOS_OPTIONS",))
    cc, cxx, kokkos_options_raw = macro_vals[4], macro_vals[5], macro_vals[-1]
    if mpilib == "mpi-serial":
        # Use serial compilers
        cc, cxx = macro_vals[1], macro_vals[2]

    kokkos_options = kokkos_options_raw.split(":=")[-1].strip()

    # We will take care of setting CMAKE_CXX_COMPILER unless user has explictly
    # set one in their KOKKOS_OPTIONS.
    if "DCMAKE_CXX_COMPILER" not in kokkos_options:
        if "/" in cxx:
            cxx = "-DCMAKE_CXX_COMPILER={}".format(cxx)
        else:
            cxx_path = shutil.which(cxx)
            expect(cxx_path is not None, "{} is not in PATH?".format(cxx))
            cxx = "-DCMAKE_CXX_COMPILER={}".format(cxx_path)

    if "/" in cc:
        cc = "-DCMAKE_C_COMPILER={}".format(cc)
    else:
        cc_path = shutil.which(cc)
        expect(cc_path is not None, "{} is not in PATH?".format(cc))
        cc = "-DCMAKE_C_COMPILER={}".format(cc_path)

    gmake_cmd = case.get_value("GMAKE")
    gmake_j = case.get_value("GMAKE_J")

    # Just enable all ekat packages?
    ekat_cmake_options = "-DEKAT_ENABLE_ALL_PACKAGES=On -DEKAT_ENABLE_TESTS=Off"
    if mpilib == "mpi-serial":
        ekat_cmake_options += " -DEKAT_ENABLE_MPI=Off"

    gen_makefile_cmd = f"cmake {kokkos_options} {cc} {cxx} -DCMAKE_CXX_STANDARD=17 {ekat_cmake_options} -DCMAKE_INSTALL_PREFIX={installpath} {ekat_dir}"

    # When later we use find_package to get kokkos in CMake, the folder
    # install_sharedpath/kokkos (which is bldroot here) gets picked over
    # the actual install folders. Since a KokkosConfig.cmake file *is* present
    # there, but the other cmake config files aren't, this causes config errors.
    # To prevent find_package from picking up that folder, we actually use
    # ${bldroot}/build as a binary dir, so that CMake won't consider it when
    # executing find_package.
    bldroot = f"{bldroot}/build"
    if not os.path.isdir(bldroot):
        os.makedirs(bldroot)

    run_bld_cmd_ensure_logging(gen_makefile_cmd, logger, from_dir=bldroot)
    run_bld_cmd_ensure_logging(
        "{} VERBOSE=1 -j {}".format(gmake_cmd, gmake_j), logger, from_dir=bldroot
    )
    run_bld_cmd_ensure_logging("{} install".format(gmake_cmd), logger, from_dir=bldroot)

###############################################################################
def _main(argv, documentation):
###############################################################################
    bldroot, installpath, caseroot = parse_command_line(argv, documentation)
    with Case(caseroot, read_only=False) as case:
        buildlib(bldroot, installpath, case)

###############################################################################
if __name__ == "__main__":
    _main(sys.argv, __doc__)
